#pragma once

struct __attribute__((packed)) clSO3 {
  float3 r0;
  float3 r1;
  float3 r2;
};

struct __attribute__((packed)) clSE3 {
    struct clSO3 rotation;
    float3 translation;
};

inline float3 mul_so3(const struct clSO3 m, const float3 v) {
    float3 result;
    result.x = dot(m.r0, v);
    result.y = dot(m.r1, v);
    result.z = dot(m.r2, v);
    return result;
}

inline struct clSO3 inverse_so3(const struct clSO3 m) {
    struct clSO3 result;
    result.r0.x = m.r0.x;
    result.r0.y = m.r1.x;
    result.r0.z = m.r2.x;

    result.r1.x = m.r0.y;
    result.r1.y = m.r1.y;
    result.r1.z = m.r2.y;

    result.r2.x = m.r0.z;
    result.r2.y = m.r1.z;
    result.r2.z = m.r2.z;
    return result;
}

inline struct clSE3 inverse_se3(const struct clSE3 m) {
    struct clSE3 result;
    result.rotation = inverse_so3(m.rotation);
    result.translation = -mul_so3(result.rotation, m.translation);
    return result;
}

inline float3 mul_se3(const struct clSE3 m, const float3 v) {
    float3 result = mul_so3(m.rotation, v) + m.translation;
    return result;
}

struct __attribute__((packed)) clSO2 {
    float2 r0;
    float2 r1;
};

struct __attribute__((packed)) clSE2 {
    struct clSO2 rotation;
    float2 translation;
};

inline float2 mul_so2(const struct clSO2 m, const float2 v) {
    float2 result;
    result.x = dot(m.r0, v);
    result.y = dot(m.r1, v);
    return result;
}

inline float2 mul_se2(const struct clSE2 m, const float2 v) {
    return mul_so2(m.rotation, v) + m.translation;
}
